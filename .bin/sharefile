#!/usr/bin/env bash

# Include bootstrap.

. ~/.bash/bootstrap;

# Intialize.

file='';
dir='';
basename='';
basename_no_ext='';
recipient='';

# Parse options.

short_options='f:r:';
long_options='file:,recipient:';
options="$(getopt --options "${short_options}" --longoptions "${long_options}" -- "${@}")";

eval set -- "${options}"; while true; do
  case "${1}" in
    -f|--file)
      file="${2}";
      shift 2;
      ;;
    -r|--recipient)
      recipient="${2}";
      shift 2;
      ;;
    --) shift 1; break;
      ;;
    *) echo 'Internal error.'; exit 1;
      ;;
  esac;
done;

if [[ -z "${file}" && -n "${1:-}" ]]; then
  file="${1}"; fi;

if [[ -z "${recipient}" && -n "${2:-}" ]]; then
  recipient="${2}"; fi;

dir="${file%/*}";
basename="${file##*/}";
basename_no_ext="${basename%.*}";

# Validate options.

if [[ -z "${file}" || ! -f "${file}" || -z "${dir}" || -z "${basename}" || -z "${basename_no_ext}" ]]; then
  echo 'Expecting a parseable input file.';
  exit 1; # Error status.
fi;

# Make sure directory exists.

mkdir --parents ~/tmp/sharefile;

# Upload for sharing via transfer.sh.

if [[ "${recipient}" == symmetric ]]; then

  echo 'Uploading encrypted file w/ symmetric key.';

  gpg_file=~/tmp/sharefile/"$(uuidgen)"-"${basename}".gpg;
	gpg_basename="${gpg_file##*/}"; # Use hashed file name.

  gpg2 --armor --symmetric --cipher-algo AES256 --output "${gpg_file}" "${file}";
  link="$(curl --request PUT --upload-file "${gpg_file}" https://transfer.sh/"${gpg_basename}")";

  rm "${gpg_file}"; # Cleanup `.gpg` file.

  echo -n "${link}" | pbcopy; echo "${link}";
  echo 'Copied to clipboard; expires in 14 days.';

# Upload for sharing via transfer.sh.

elif [[ -n "${recipient}" ]]; then

  echo 'Uploading encrypted file for: '"${recipient}";

  gpg_file=~/tmp/sharefile/"$(uuidgen)"-"${basename}".gpg;
	gpg_basename="${gpg_file##*/}"; # Use hashed file name.

	keybase pgp encrypt --infile "${file}" --outfile "${gpg_file}" "${recipient}";
  link="$(curl --request PUT --upload-file "${gpg_file}" https://transfer.sh/"${gpg_basename}")";

  rm "${gpg_file}"; # Cleanup `.gpg` file.

  echo -n "${link}" | pbcopy; echo "${link}";
  echo 'Copied to clipboard; expires in 14 days.';

else # Unencrypted (default behavior w/ no recipient).

  echo 'Uploading file for public sharing.';

	une_basename="$(uuidgen)"-"${basename}"; # Use hashed file name.
  link="$(curl --request PUT --upload-file "${file}" https://transfer.sh/"${une_basename}")";

  echo -n "${link}" | pbcopy; echo "${link}";
  echo 'Copied to clipboard; expires in 14 days.';
fi;
